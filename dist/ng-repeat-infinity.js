var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ngRepeatInfinity;
(function (ngRepeatInfinity) {
    var NG_REMOVED = '$$NG_REMOVED';
    var expressionMatch = /^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/;
    function ngRepeatMinErr(type, msg) {
        return type + ' - ' + msg;
    }
    /// Extending ngRepeat to support virtualization and inffinite scrolling. 
    /// ngRepeat: https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js
    var NgRepeatInfinity = (function (_super) {
        __extends(NgRepeatInfinity, _super);
        // @NgAnnotate
        function NgRepeatInfinity($parse, $animate, $injector) {
            _super.call(this);
            this.$parse = $parse;
            this.$animate = $animate;
            this.$injector = $injector;
            this.restrict = 'A';
            this.transclude = 'element';
        }
        NgRepeatInfinity.prototype.unboundCompile = function ($el, $attr) {
            this.expression = $attr.ngRepeatInfinity;
            this.ngRepeatEndComment = document.createComment(' end ngRepeatInfinity: ' + this.expression + ' ');
            var match = this.expression.match(expressionMatch);
            if (!match) {
                throw "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '" + this.expression;
            }
            this.lhs = match[1];
            this.rhs = match[2];
            this.aliasAs = match[3];
            this.trackByExp = match[4];
            match = this.lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
            if (!match) {
                throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '" + this.lhs + "'");
            }
            this.valueIdentifier = match[3] || match[1];
            this.keyIdentifier = match[2];
            if (this.aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(this.aliasAs) ||
                /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(this.aliasAs))) {
                throw ngRepeatMinErr('badident', "alias '" + this.aliasAs + "' is invalid --- must be a valid JS identifier which is not a reserved name.");
            }
            this.hashFnLocals = { $id: ngRepeatInfinity.utils.hashKey };
            if (this.trackByExp) {
                this.trackByExpGetter = this.$parse(this.trackByExp);
            }
            else {
                this.trackByIdArrayFn = function (key, value) {
                    return ngRepeatInfinity.utils.hashKey(value);
                };
                this.trackByIdObjFn = function (key) {
                    return key;
                };
            }
            return this.link;
        };
        NgRepeatInfinity.prototype.preLink = function ($scope, $element, $attributes, $controller, $transclude) {
            var _this = this;
            if (this.trackByExpGetter) {
                this.trackByIdExpFn = function (key, value, index) {
                    // assign key, value, and $index to the locals so that they can be used in hash functions
                    if (_this.keyIdentifier)
                        _this.hashFnLocals[_this.keyIdentifier] = key;
                    _this.hashFnLocals[_this.valueIdentifier] = value;
                    _this.hashFnLocals.$index = index;
                    return _this.trackByExpGetter($scope, _this.hashFnLocals);
                };
            }
            var nextBlockMap = ngRepeatInfinity.utils.createMap();
            var lastBlockMap = ngRepeatInfinity.utils.createMap();
            //watch props
            $scope.$watchCollection(this.rhs, function (collection) {
                var previousNode = $element[0];
                if (_this.aliasAs) {
                    $scope[_this.aliasAs] = collection;
                }
                var collectionKeys;
                if (ngRepeatInfinity.utils.isArrayLike(collection)) {
                    collectionKeys = collection;
                    _this.trackByIdFn = _this.trackByIdFn || _this.trackByIdArrayFn;
                }
                else {
                    _this.trackByIdFn = _this.trackByIdFn || _this.trackByIdObjFn;
                    // if object, extract keys, sort them and use to determine order of iteration over obj props
                    collectionKeys = [];
                    for (var key in collection) {
                        if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                            collectionKeys.push(key);
                        }
                    }
                    collectionKeys.sort();
                }
                var collectionLength = collectionKeys.length;
                var nextBlockOrder = new Array(collectionLength);
                // locate existing items
                for (var index = 0; index < collectionLength; index++) {
                    key = (collection === collectionKeys) ? index : collectionKeys[index];
                    var value = collection[key];
                    var trackById = _this.trackByIdFn(key, value, index);
                    if (lastBlockMap[trackById]) {
                        // found previously seen block
                        var block = lastBlockMap[trackById];
                        delete lastBlockMap[trackById];
                        nextBlockMap[trackById] = block;
                        nextBlockOrder[index] = block;
                    }
                    else if (nextBlockMap[trackById]) {
                        // if collision detected. restore lastBlockMap and throw an error
                        angular.forEach(nextBlockOrder, function (block) {
                            if (block && block.scope)
                                lastBlockMap[block.id] = block;
                        });
                        throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: " + _this.expression + ", Duplicate key: " + trackById + ", Duplicate value: " + value);
                    }
                    else {
                        // new never before seen block
                        nextBlockOrder[index] = { id: trackById, scope: undefined, clone: undefined };
                        nextBlockMap[trackById] = true;
                    }
                }
                // remove leftover items
                for (var blockKey in lastBlockMap) {
                    block = lastBlockMap[blockKey];
                    var elementsToRemove = ngRepeatInfinity.utils.getBlockNodes(block.clone);
                    _this.$animate.leave(elementsToRemove);
                    if (elementsToRemove[0].parentNode) {
                        // if the element was not removed yet because of pending animation, mark it as deleted
                        // so that we can ignore it later
                        for (index = 0, length = elementsToRemove.length; index < length; index++) {
                            elementsToRemove[index][NG_REMOVED] = true;
                        }
                    }
                    block.scope.$destroy();
                }
                var nextNode;
                // we are not using forEach for perf reasons (trying to avoid #call)
                for (index = 0; index < collectionLength; index++) {
                    key = (collection === collectionKeys) ? index : collectionKeys[index];
                    value = collection[key];
                    block = nextBlockOrder[index];
                    if (block.scope) {
                        // if we have already seen this object, then we need to reuse the
                        // associated scope/element
                        nextNode = previousNode;
                        // skip nodes that are already pending removal via leave animation
                        do {
                            nextNode = nextNode.nextSibling;
                        } while (nextNode && nextNode[NG_REMOVED]);
                        if (ngRepeatInfinity.utils.getBlockStart(block) != nextNode) {
                            // existing item which got moved
                            _this.$animate.move(ngRepeatInfinity.utils.getBlockNodes(block.clone), null, $(previousNode));
                        }
                        previousNode = ngRepeatInfinity.utils.getBlockEnd(block);
                        ngRepeatInfinity.utils.updateScope(block.scope, index, _this.valueIdentifier, value, _this.keyIdentifier, key, collectionLength);
                    }
                    else {
                        // new item which we don't know about
                        $transclude(function (clone, scope) {
                            block.scope = scope;
                            // http://jsperf.com/clone-vs-createcomment
                            var endNode = _this.ngRepeatEndComment.cloneNode(false);
                            clone[clone.length++] = endNode;
                            // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                            _this.$animate.enter(clone, null, $(previousNode));
                            previousNode = endNode;
                            // Note: We only need the first/last node of the cloned nodes.
                            // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                            // by a directive with templateUrl when its template arrives.
                            block.clone = clone;
                            nextBlockMap[block.id] = block;
                            ngRepeatInfinity.utils.updateScope(block.scope, index, _this.valueIdentifier, value, _this.keyIdentifier, key, collectionLength);
                        });
                    }
                }
                lastBlockMap = nextBlockMap;
            });
        };
        NgRepeatInfinity.prototype.postLink = function ($scope, $el, $attr) {
            // Stuff after link...
        };
        return NgRepeatInfinity;
    })(ngRepeatInfinity.utils.AngularDirectiveBaseClass);
    angular
        .module('ng-repeat-infinity', [])
        .factory('ngRepeatInfinityObject')
        .directive('ngRepeatInfinity', function ($injector) {
        return $injector.instantiate(NgRepeatInfinity);
    });
})(ngRepeatInfinity || (ngRepeatInfinity = {}));

//# sourceMappingURL=data:application/json;base64,