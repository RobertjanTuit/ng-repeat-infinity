var ngRepeatInfinity;
(function (ngRepeatInfinity) {
    var utils;
    (function (utils) {
        var AngularDirectiveBaseClass = (function () {
            function AngularDirectiveBaseClass() {
                this.link = {
                    pre: this.preLink.bind(this),
                    post: this.postLink.bind(this)
                };
                this.compile = this.unboundCompile.bind(this);
            }
            AngularDirectiveBaseClass.prototype.unboundCompile = function ($el, $attr, transclude) {
                return this.link;
            };
            ;
            AngularDirectiveBaseClass.prototype.preLink = function ($scope, $el, $attr, controller, $transclude) { };
            AngularDirectiveBaseClass.prototype.postLink = function ($scope, $el, $attr, controller, $transclude) { };
            return AngularDirectiveBaseClass;
        })();
        utils.AngularDirectiveBaseClass = AngularDirectiveBaseClass;
        var uid = 0;
        utils.nextUid = function () {
            return ++uid;
        };
        function createMap() {
            return Object.create(null);
        }
        utils.createMap = createMap;
        function getBlockNodes(nodes) {
            // TODO(perf): update `nodes` instead of creating a new object?
            var node = nodes[0];
            var endNode = nodes[nodes.length - 1];
            var blockNodes;
            for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
                if (blockNodes || nodes[i] !== node) {
                    if (!blockNodes) {
                        blockNodes = angular.element([].slice.call(nodes, 0, i));
                    }
                    blockNodes.push(node);
                }
            }
            return blockNodes || nodes;
        }
        utils.getBlockNodes = getBlockNodes;
        utils.updateScope = function (scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
            // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
            scope[valueIdentifier] = value;
            if (keyIdentifier)
                scope[keyIdentifier] = key;
            scope.$index = index;
            scope.$first = (index === 0);
            scope.$last = (index === (arrayLength - 1));
            scope.$middle = !(scope.$first || scope.$last);
            // jshint bitwise: false
            scope.$odd = !(scope.$even = (index & 1) === 0);
            // jshint bitwise: true
        };
        utils.getBlockStart = function (block) {
            return block.clone[0];
        };
        utils.getBlockEnd = function (block) {
            return block.clone[block.clone.length - 1];
        };
        utils.hashKey = function (obj) {
            var objType = typeof obj;
            var key;
            if (objType == 'object' && obj !== null) {
                if (typeof (key = obj.$$hashKey) == 'function') {
                    // must invoke on object to keep the right this
                    key = obj.$$hashKey();
                }
                else if (key === undefined) {
                    key = obj.$$hashKey = utils.nextUid();
                }
            }
            else {
                key = obj;
            }
            return objType + ':' + key;
        };
        function isWindow(obj) {
            return obj && obj.document && obj.location && obj.alert && obj.setInterval;
        }
        utils.isWindow = isWindow;
        ;
        function isArrayLike(obj) {
            if (obj == null || isWindow(obj)) {
                return false;
            }
            var length = obj.length;
            if (obj.nodeType === 1 && length) {
                return true;
            }
            return angular.isArray(obj) || !angular.isFunction(obj) && (length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj);
        }
        utils.isArrayLike = isArrayLike;
        ;
    })(utils = ngRepeatInfinity.utils || (ngRepeatInfinity.utils = {}));
})(ngRepeatInfinity || (ngRepeatInfinity = {}));

//# sourceMappingURL=data:application/json;base64,